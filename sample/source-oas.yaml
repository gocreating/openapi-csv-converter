openapi: 3.0.0

info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.0.0

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

components:
  schemas:
    Schema1:
      type: object
      properties:
        s1_p1:
          type: string
        s1_p2:
          # reference before definition
          $ref: '#/components/schemas/Schema2'
    Schema2:
      type: array
      items:
        type: string
    Schema3:
      type: object
      properties:
        s3_p1:
          type: number
        s3_p2:
          # circular reference
          $ref: '#/components/schemas/Schema3'
    Object1:
      type: object
      properties:
        objectType:
          type: string
        obj1_p1:
          type: integer
      required:
        - objectType
    Object2:
      type: object
      properties:
        objectType:
          type: string
        obj2_p1:
          type: number
      required:
        - objectType

paths:
  /path1:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                # primitive types
                p1:
                  type: string
                p2:
                  type: number
                p3:
                  type: integer
                p4:
                  type: boolean
                p5:
                  type: array
                  items:
                    type: string
                p5_nested:
                  type: array
                  items:
                    type: array
                    items:
                      type: string
                p6:
                  type: object
                  properties:
                    p6_1:
                      type: string
                    p6_2:
                      type: number
                p6_nested:
                  type: object
                  properties:
                    p6_nested_1:
                      type: string
                    p6_nested_2:
                      type: object
                      properties:
                        p6_nested_2_1:
                          type: string

                # reference
                p7:
                  $ref: '#/components/schemas/Schema2'
                p8:
                  $ref: '#/components/schemas/Schema3'

                # porlymorphic types
                p9:
                  oneOf:
                    - type: string
                    - type: number
                p10:
                  anyOf:
                    - type: string
                    - type: number
                p11:
                  allOf:
                    - type: object
                      properties:
                        p11_1:
                          type: string
                    - type: object
                      properties:
                        p11_2:
                          type: number
                    - $ref: '#/components/schemas/Schema1'
                p12:
                  not:
                    type: string
                p13:
                  not:
                    oneOf:
                      - type: string
                      - type: boolean

                # oneOf with discriminator
                p14:
                  oneOf:
                    - type: string
                    - type: number
                  discriminator:
                    propertyName: objectType
                    mapping:
                      # mapping values are string only. We don't need to handle inline schema.
                      obj1: '#/components/schemas/Object1'
                      obj2: '#/components/schemas/Object2'

                # jsonschema only types
                p15:
                  type: 'null'
      responses:
        '200':
          description: response description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema2'